// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  email          String  @unique
  name           String?
  username       String  @unique
  password       String
  profileImage   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshToken RefreshToken[]

  tweet Tweet[]
  mediaFile MediaFile[]
}

model RefreshToken {
  id        String     @id @default(uuid())
  token     String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user User @relation(fields: [userId], references: [id])
}

model Tweet {
  id        String     @id @default(uuid())
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author
  author User @relation(fields: [authorId], references: [id])
  authorId String

  // Anwer to tweet
  replyToId String?
  replyTo Tweet? @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Tweet[] @relation("replies")

  // Media Files
  mediaFile MediaFile[]

}

model MediaFile {
  id        String     @id @default(uuid())
  url String
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User
  user User @relation(fields: [userId], references: [id])
  userId String

  // tweets
  tweet Tweet? @relation(fields: [tweetId], references: [id])
  tweetId String?

}
